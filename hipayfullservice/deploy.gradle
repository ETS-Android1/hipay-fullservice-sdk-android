apply plugin: 'maven-publish'
apply plugin: 'signing'

def pomConfig = {
    name libraryName
    url gitUrl

    licenses {
        license {
            name licenseName
            url licenseUrl
        }
    }

    developers {
        developer {
            id developerId
            name developerName
            email developerEmail
        }
    }

    scm {
        url gitUrl
        connection gitUrl
        developerConnection siteUrl
    }
}


task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

publishing {
    publications {
        myPublication(MavenPublication) {

            groupId publishedGroupId
            artifactId artifact
            version libraryVersion

            artifact androidJavadocsJar
            artifact androidSourcesJar
            artifact("$buildDir/outputs/aar/" + artifact + "-release.aar")

            pom.withXml {
                //Packaging
                def children = asNode().children()
                def versionIndex = children.indexOf(children.find {it.name().localPart == 'packaging'})
                children.remove(versionIndex)

                asNode().appendNode('packaging', 'aar')
                asNode().appendNode('description', libraryDescription)

                //Dependencies
                final dependencesNode = asNode().appendNode('dependencies')

                ext.addDependency = { dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return // ignore invalid dependencies

                    final dependencyNode = dependencesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)

                    if (!dep.transitive) {
                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        // Otherwise add specified exclude rules
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }


                // List all "api" dependencies (for new Gradle) as "compile" dependencies
                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }

                //Licenses + Developers + Scm
                asNode().children().last() + pomConfig
            }
        }
    }
}

// Sign build with PGP key
signing {
    sign publishing.publications.myPublication
}